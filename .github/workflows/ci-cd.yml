# DEPRECATED: This workflow has been split into microservice-specific workflows
# 
# New structure:
# - .github/workflows/main.yml - Main orchestration workflow
# - .github/workflows/cv-intake-service.yml - CV Intake Service CI/CD
# - .github/workflows/cv-processing-service.yml - CV Processing Service CI/CD  
# - .github/workflows/cv-storage-service.yml - CV Storage Service CI/CD
# - .github/workflows/cv-search-service.yml - CV Search Service CI/CD
# - .github/workflows/templates/ - Reusable workflow templates
#
# This file is kept for reference and will be removed in a future release.
# Please use the new main.yml workflow which automatically triggers
# service-specific workflows based on changed files.

name: Legacy CI/CD Pipeline (DEPRECATED)

on:
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run this deprecated workflow'
        required: true
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  deprecation-notice:
    name: Deprecation Notice
    runs-on: ubuntu-latest
    steps:
      - name: Show deprecation notice
        run: |
          echo "::warning::This workflow is deprecated. Please use .github/workflows/main.yml instead."
          echo "The new workflow automatically detects changes and runs only relevant service tests."
          echo "To force run this deprecated workflow, set force_run input to 'true'."
          
          if [ "${{ github.event.inputs.force_run }}" != "true" ]; then
            echo "::error::Workflow stopped. Use main.yml workflow or set force_run=true to continue."
            exit 1
          fi
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit safety pre-commit
          pip install -r requirements-test.txt

      - name: Run Ruff linting
        run: |
          ruff check . --output-format=github
        continue-on-error: false

      - name: Run Ruff formatting check
        run: |
          ruff format --check .

      - name: Run MyPy type checking
        run: |
          mypy cv-intake-service cv-processing-service cv-storage-service cv-search-service --ignore-missing-imports

      - name: Run Bandit security analysis
        run: |
          bandit -r cv-intake-service cv-processing-service cv-storage-service cv-search-service -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety vulnerability check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/cv_intake_service/test_file_service.py \
                 tests/unit/cv_intake_service/test_redis_queue.py \
                 tests/unit/cv_intake_service/test_errors.py \
                 tests/unit/cv_intake_service/test_job_service_simplified.py \
                 tests/unit/cv_intake_service/test_massive_coverage_final.py \
            --cov=cv-intake-service \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --cov-fail-under=30 \
            --junitxml=pytest-results.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Wait for services
        run: |
          sleep 30
          curl -f http://localhost:6333/health
          echo "RETURN 1" | cypher-shell -u neo4j -p testpassword -a bolt://localhost:7687

      - name: Run integration tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: testpassword
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          TEST_MODE: integration
        run: |
          pytest tests/integration/ \
            --cov=cv-intake-service \
            --cov=cv-processing-service \
            --cov=cv-storage-service \
            --cov=cv-search-service \
            --cov-report=xml:integration-coverage.xml \
            --junitxml=integration-results.xml \
            -v

      - name: Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./integration-coverage.xml
          flags: integration
          name: codecov-integration

  # Build and Test Docker Images
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    strategy:
      matrix:
        service: [cv-intake-service, cv-processing-service, cv-storage-service, cv-search-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: resumariner/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm resumariner/${{ matrix.service }}:${{ github.sha }} python -c "import sys; print(f'Python {sys.version}')"

  # Load Testing
  load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60  # Wait for services to be ready

      - name: Run load tests
        run: |
          cd tests/load
          locust -f locustfile.py \
            --headless \
            --users 10 \
            --spawn-rate 2 \
            --run-time 5m \
            --host http://localhost:8001 \
            --html load-test-report.html \
            --csv load-test-results

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: |
            tests/load/load-test-report.html
            tests/load/load-test-results_*

      - name: Stop test environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [cv-intake-service, cv-processing-service, cv-storage-service, cv-search-service]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: resumariner/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name resumariner-staging

      - name: Deploy to staging
        run: |
          kubectl set image deployment/cv-intake-service cv-intake-service=resumariner/cv-intake-service:${{ github.sha }} -n staging
          kubectl set image deployment/cv-processing-service cv-processing-service=resumariner/cv-processing-service:${{ github.sha }} -n staging
          kubectl set image deployment/cv-storage-service cv-storage-service=resumariner/cv-storage-service:${{ github.sha }} -n staging
          kubectl set image deployment/cv-search-service cv-search-service=resumariner/cv-search-service:${{ github.sha }} -n staging
          
          kubectl rollout status deployment/cv-intake-service -n staging --timeout=300s
          kubectl rollout status deployment/cv-processing-service -n staging --timeout=300s
          kubectl rollout status deployment/cv-storage-service -n staging --timeout=300s
          kubectl rollout status deployment/cv-search-service -n staging --timeout=300s

      - name: Run smoke tests
        run: |
          curl -f https://staging.resumariner.com/api/v1/health || exit 1
          echo "Staging deployment successful"

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, load-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name resumariner-production

      - name: Deploy to production with blue-green strategy
        run: |
          # Create new deployment with green suffix
          kubectl patch deployment cv-intake-service -n production -p '{"spec":{"template":{"spec":{"containers":[{"name":"cv-intake-service","image":"resumariner/cv-intake-service:${{ github.sha }}"}]}}}}'
          kubectl patch deployment cv-processing-service -n production -p '{"spec":{"template":{"spec":{"containers":[{"name":"cv-processing-service","image":"resumariner/cv-processing-service:${{ github.sha }}"}]}}}}'
          kubectl patch deployment cv-storage-service -n production -p '{"spec":{"template":{"spec":{"containers":[{"name":"cv-storage-service","image":"resumariner/cv-storage-service:${{ github.sha }}"}]}}}}'
          kubectl patch deployment cv-search-service -n production -p '{"spec":{"template":{"spec":{"containers":[{"name":"cv-search-service","image":"resumariner/cv-search-service:${{ github.sha }}"}]}}}}'
          
          kubectl rollout status deployment/cv-intake-service -n production --timeout=600s
          kubectl rollout status deployment/cv-processing-service -n production --timeout=600s
          kubectl rollout status deployment/cv-storage-service -n production --timeout=600s
          kubectl rollout status deployment/cv-search-service -n production --timeout=600s

      - name: Run production health checks
        run: |
          sleep 30
          curl -f https://api.resumariner.com/health || exit 1
          echo "Production deployment successful"

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Cleanup old Docker images
        run: |
          # This would typically connect to your container registry
          echo "Cleaning up old images..."

      - name: Generate deployment report
        run: |
          echo "## Deployment Report" > deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Triggered by**: ${{ github.actor }}" >> deployment-report.md
          echo "- **Deployment time**: $(date)" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md