name: Test Suite

on:
  push:
    branches: [ main, v2 ]
  pull_request:
    branches: [ main ]

env:
  # Mark as CI environment
  CI: true

  # Use repository secrets for API keys
  TEXT_LLM_API_KEY: ${{ secrets.TEXT_LLM_API_KEY }}
  OCR_LLM_API_KEY: ${{ secrets.OCR_LLM_API_KEY }}

  # Service configuration
  NEO4J_PASSWORD: testpassword123
  DJANGO_SETTINGS_MODULE: backend.settings

  # Mark as GitHub Actions for settings.py
  GITHUB_ACTIONS: true

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:latest
        env:
          NEO4J_AUTH: neo4j/testpassword123
          NEO4J_apoc_export_file_enabled: true
          NEO4J_dbms_connector_bolt_listen__address: 0.0.0.0:7687
          NEO4J_dbms_connector_http_listen__address: 0.0.0.0:7474
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment
      run: |
        cd backend
        uv venv

    - name: Install dependencies
      run: |
        cd backend
        source .venv/bin/activate
        uv pip install -r ../requirements-test.txt
        uv pip install -e .

    - name: Wait for services
      run: |
        cd backend
        source .venv/bin/activate
        python -c "
import time
import sys
from neo4j import GraphDatabase
from qdrant_client import QdrantClient
import redis

# Wait for Neo4j
for i in range(30):
    try:
        driver = GraphDatabase.driver('bolt://localhost:7687', auth=('neo4j', 'testpassword123'))
        with driver.session() as session:
            session.run('RETURN 1')
        driver.close()
        print('Neo4j is ready')
        break
    except Exception as e:
        if i == 29:
            print(f'Neo4j failed to start: {e}')
            sys.exit(1)
        time.sleep(2)

# Wait for Qdrant
for i in range(30):
    try:
        client = QdrantClient(host='localhost', port=6333)
        client.get_collections()
        print('Qdrant is ready')
        break
    except Exception as e:
        if i == 29:
            print(f'Qdrant failed to start: {e}')
            sys.exit(1)
        time.sleep(2)

# Wait for Redis
for i in range(30):
    try:
        r = redis.Redis(host='localhost', port=6379)
        r.ping()
        r.close()
        print('Redis is ready')
        break
    except Exception as e:
        if i == 29:
            print(f'Redis failed to start: {e}')
            sys.exit(1)
        time.sleep(2)
"

    - name: Run Core Tests
      run: |
        cd backend
        source .venv/bin/activate
        python -m pytest core/tests.py -v --tb=short
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: testpassword123
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run Processor Tests
      run: |
        cd backend
        source .venv/bin/activate
        python -m pytest processor/tests.py -v --tb=short
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: testpassword123
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run Search Tests
      run: |
        cd backend
        source .venv/bin/activate
        python -m pytest search/tests.py -v --tb=short
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: testpassword123
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run Storage Tests
      run: |
        cd backend
        source .venv/bin/activate
        python -m pytest storage/tests.py -v --tb=short
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: testpassword123
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Cleanup Test Data
      if: always()
      run: |
        cd backend
        source .venv/bin/activate
        python -c "
from neo4j import GraphDatabase
from qdrant_client import QdrantClient
import redis

try:
    # Clean Neo4j
    driver = GraphDatabase.driver('bolt://localhost:7687', auth=('neo4j', 'testpassword123'))
    with driver.session() as session:
        session.run('MATCH (n) WHERE n.uid STARTS WITH \"test_\" DETACH DELETE n')
    driver.close()
    print('Neo4j cleaned')
except:
    pass

try:
    # Clean Qdrant
    client = QdrantClient(host='localhost', port=6333)
    client.delete_collection('test_cv_key_points')
    print('Qdrant cleaned')
except:
    pass

try:
    # Clean Redis
    r = redis.Redis(host='localhost', port=6379)
    for key in r.scan_iter('test_cv:*'):
        r.delete(key)
    r.close()
    print('Redis cleaned')
except:
    pass
"

    - name: Test Report
      if: always()
      run: |
        echo "Test suite completed"
        echo "Core, Processor, Search, and Storage tests have been executed"