name: CV Intake Service CI/CD

on:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: false
  push:
    paths:
      - 'cv-intake-service/**'
      - '.github/workflows/cv-intake-service.yml'
  pull_request:
    paths:
      - 'cv-intake-service/**'
      - '.github/workflows/cv-intake-service.yml'

env:
  SERVICE_NAME: cv-intake-service
  SERVICE_PATH: ./cv-intake-service
  PYTHON_VERSION: "3.11"

jobs:
  # Service-specific tests
  test-cv-intake:
    name: Test CV Intake Service
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          pip install -r ${{ env.SERVICE_PATH }}/requirements.txt

      - name: Run service-specific linting
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          ruff check . --output-format=github
          ruff format --check .

      - name: Run service-specific type checking
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          mypy . --ignore-missing-imports

      - name: Run unit tests with coverage
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          TEST_MODE: unit
        run: |
          pytest ${{ env.SERVICE_PATH }}/tests/unit/ \
            --cov=${{ env.SERVICE_NAME }} \
            --cov-report=xml:${{ env.SERVICE_NAME }}-coverage.xml \
            --cov-report=html:${{ env.SERVICE_NAME }}-htmlcov \
            --cov-report=term-missing \
            --cov-fail-under=30 \
            --junitxml=${{ env.SERVICE_NAME }}-results.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./${{ env.SERVICE_NAME }}-coverage.xml
          flags: ${{ env.SERVICE_NAME }}
          name: codecov-${{ env.SERVICE_NAME }}
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.SERVICE_NAME }}-test-results-${{ matrix.python-version }}
          path: |
            ${{ env.SERVICE_NAME }}-results.xml
            ${{ env.SERVICE_NAME }}-htmlcov/

  # Security scanning
  security-scan-cv-intake:
    name: Security Scan CV Intake
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -r ${{ env.SERVICE_PATH }}/requirements.txt

      - name: Run Bandit security scan
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          bandit -r . -f json -o bandit-${{ env.SERVICE_NAME }}.json
        continue-on-error: true

      - name: Run Safety vulnerability check
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          safety check --json --output safety-${{ env.SERVICE_NAME }}.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ env.SERVICE_NAME }}
          path: |
            ${{ env.SERVICE_PATH }}/bandit-${{ env.SERVICE_NAME }}.json
            ${{ env.SERVICE_PATH }}/safety-${{ env.SERVICE_NAME }}.json

  # Build Docker image for testing
  build-cv-intake:
    name: Build CV Intake Docker
    runs-on: ubuntu-latest
    needs: [test-cv-intake]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (local only)
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          platforms: linux/amd64
          push: false
          tags: ${{ env.SERVICE_NAME }}:test
          cache-from: type=gha,scope=${{ env.SERVICE_NAME }}
          cache-to: type=gha,mode=max,scope=${{ env.SERVICE_NAME }}

      - name: Test Docker image
        run: |
          docker run --rm ${{ env.SERVICE_NAME }}:test python -c "import sys; print(f'Python {sys.version}')"

  # Container security scanning
  container-security-cv-intake:
    name: Container Security CV Intake
    runs-on: ubuntu-latest
    needs: [build-cv-intake]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          platforms: linux/amd64
          push: false
          tags: ${{ env.SERVICE_NAME }}:scan
          cache-from: type=gha,scope=${{ env.SERVICE_NAME }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.SERVICE_NAME }}:scan
          format: 'sarif'
          output: 'trivy-${{ env.SERVICE_NAME }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ env.SERVICE_NAME }}.sarif'

  # Service-specific integration tests
  integration-test-cv-intake:
    name: Integration Test CV Intake
    runs-on: ubuntu-latest
    needs: [build-cv-intake]
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Run service integration tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          TEST_MODE: integration
        run: |
          pytest tests/integration/test_${{ env.SERVICE_NAME }}_integration.py \
            --cov=${{ env.SERVICE_NAME }} \
            --cov-report=xml:${{ env.SERVICE_NAME }}-integration-coverage.xml \
            --junitxml=${{ env.SERVICE_NAME }}-integration-results.xml \
            -v

      - name: Upload integration coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./${{ env.SERVICE_NAME }}-integration-coverage.xml
          flags: integration-${{ env.SERVICE_NAME }}
          name: codecov-integration-${{ env.SERVICE_NAME }}

