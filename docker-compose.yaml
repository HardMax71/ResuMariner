services:
  traefik:
    image: traefik:v2.9
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.backend.address=:8000"
      - "--entrypoints.internal.address=:8081"
    ports:
      - "80:80"
      - "8000:8000"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - public-network
      - internal-network
    labels:
      - "traefik.enable=true"

  neo4j:
    image: neo4j:latest
    expose:
      - "7474"
      - "7687"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-secure_default_password}
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    volumes:
      - neo4j_data:/data
    networks:
      - internal-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neo4j.rule=Host(`neo4j.internal.localhost`)"
      - "traefik.http.routers.neo4j.entrypoints=internal"
      - "traefik.http.services.neo4j.loadbalancer.server.port=7474"
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  qdrant:
    image: qdrant/qdrant
    expose:
      - "6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - internal-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.internal.localhost`)"
      - "traefik.http.routers.qdrant.entrypoints=internal"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"

  redis:
    image: redis:alpine
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - internal-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    expose:
      - "16686"
      - "6831"
      - "14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - internal-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.internal.localhost`)"
      - "traefik.http.routers.jaeger.entrypoints=internal"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  prometheus:
    image: prom/prometheus:latest
    expose:
      - "9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - internal-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.internal.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=internal"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    expose:
      - "3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - internal-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.internal.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=internal"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  backend:
    build: ./backend
    command: sh -c "./.venv/bin/python manage.py migrate --noinput && ./.venv/bin/python manage.py collectstatic --noinput || true && ./.venv/bin/python manage.py runserver 0.0.0.0:8000"
    expose:
      - "8000"
    volumes:
      - ./uploads:/app/uploads
      - cv_temp:/tmp/cv_uploads
    env_file:
      - ./backend/.env
    networks:
      - public-network
      - internal-network
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=public-network"
      - "traefik.http.routers.backend.rule=Host(`localhost`)"
      - "traefik.http.routers.backend.entrypoints=backend"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.backend-80.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend-80.entrypoints=web"

  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    networks:
      - public-network
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=public-network"
      - "traefik.http.routers.frontend.rule=Host(`app.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"

  backend-worker-processing:
    build: ./backend
    command: sh -c "sleep 10 && ./.venv/bin/python manage.py intake_worker processing"
    volumes:
      - ./uploads:/app/uploads
      - cv_temp:/tmp/cv_uploads
    env_file:
      - ./backend/.env
    networks:
      - internal-network
    depends_on:
      redis:
        condition: service_started

  backend-worker-cleanup:
    build: ./backend
    command: sh -c "sleep 10 && ./.venv/bin/python manage.py intake_worker cleanup"
    volumes:
      - ./uploads:/app/uploads
      - cv_temp:/tmp/cv_uploads
    env_file:
      - ./backend/.env
    networks:
      - internal-network
    depends_on:
      redis:
        condition: service_started

networks:
  public-network:
    driver: bridge
  internal-network:
    driver: bridge

volumes:
  neo4j_data:
  qdrant_data:
  redis_data:
  prometheus_data:
  grafana_data:
  cv_temp:
