[project]
name = "backend"
version = "0.1.0"
description = "Django monolith providing CV intake, processing (OCR/LLM), storage (Neo4j/Qdrant), and search APIs â€” consolidates prior microservices into a single backend."
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
authors = [
    { name = "Max Azatian", email = "max.azatian@gmail.com" },
]
dependencies = [
    "django==5.1",
    "django-cors-headers==4.9.0",
    "djangorestframework==3.16.1",
    "adrf==0.1.8",
    "httpx==0.28.1",
    "neo4j==5.28.2",
    "neomodel==5.5.0",
    "prometheus-client==0.23.1",
    "pydantic-neomodel-dict==0.3.0",
    "qdrant-client==1.15.1",
    "redis==6.4.0",
    "pydantic==2.11.9",
    "pdfplumber==0.11.4",
    "pypdf==5.0.0",
    "pydantic-ai==0.0.27",
    "pydantic-extra-types==2.6.0",
    "email-validator==2.2.0",
    "tenacity==8.2.3",
    "pybreaker==1.4.0",
    "boto3>=1.35.0",
    "django-split-settings==1.3.2",
    "phonenumbers==9.0.14",
    "django-silk==5.3.0",
    "drf-spectacular==0.27.2",
    "python-dotenv==1.0.1",
]

[project.urls]
Repository = "https://github.com/HardMax71/ResuMariner/"
Homepage = "https://github.com/HardMax71/ResuMariner/"

[project.optional-dependencies]
s3 = [
    "boto3==1.35.0",
]

[dependency-groups]
dev = [
    "boto3-stubs>=1.40.40",
    "django-stubs>=5.2.5",
    "django-stubs-ext>=5.2.5",
    "djangorestframework-stubs>=3.16.3",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-django>=4.11.1",
    "types-redis>=4.6.0.20241004",
    "types-requests>=2.32.4.20250913",
    "types-tqdm>=4.67.0.20250809",
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "backend.settings"
python_files = ["tests.py", "test_*.py"]
env = {DJANGO_ENV = "testing"}
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "-p", "no:warnings"
]
testpaths = ["core", "processor", "search", "storage"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_unimported = false
ignore_missing_imports = false
no_implicit_reexport = true
check_untyped_defs = true
show_error_codes = true
show_column_numbers = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_optional = true
strict_equality = true
plugins = ["mypy_django_plugin.main"]
exclude = [
    "migrations/",
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    ".*/tests\\.py",  # Ignore all tests.py files - unholy stuff happens there
    ".*/test_.*\\.py",  # Ignore all test files
    "test_script\\.py",  # Ignore the test script
]

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long - handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from
]

[tool.ruff.lint.isort]
known-third-party = ["django", "rest_framework", "pydantic", "neomodel"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.django-stubs]
django_settings_module = "backend.settings"
strict_settings = false

[[tool.mypy.overrides]]
module = [
    "neomodel.*",
    "neo4j.*",
    "qdrant_client.*",
    "pydantic_neomodel_dict.*",
    "pdfplumber.*",
    "pypdf.*",
    "pybreaker.*",
    "silk.*",
    "drf_spectacular.*",
    "adrf.*",
    "pydantic_ai.*",
    "phonenumbers.*",
]
ignore_missing_imports = true
